{"version":3,"sources":["webpack:///./src/components/seo.js","webpack:///./src/pages/404.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/utils/typography.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["SEO","_ref","description","lang","meta","keywords","title","site","_2417117884","data","metaDescription","siteMetadata","react_default","a","createElement","Helmet_default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","propTypes","PropTypes","string","arrayOf","object","isRequired","NotFoundPage","layout","seo","m","module","exports","require","default","typography__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","typography__WEBPACK_IMPORTED_MODULE_0___default","n","typography_theme_lincoln__WEBPACK_IMPORTED_MODULE_10__","typography_theme_lincoln__WEBPACK_IMPORTED_MODULE_10___default","typography","Typography","lincolnTheme","rhythm","scale","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","React","InternalPageRenderer","Object","assign","json","shape","StaticQueryContext","createContext","StaticQuery","props","Consumer","staticQueryData","query","render","children","func","Header","siteTitle","toString","Layout","gatsby_browser_entry_StaticQuery","Fragment","header","style","margin","maxWidth","padding","paddingTop","Date","getFullYear","href","_755544856","node"],"mappings":"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","file":"component---src-pages-404-js-14e0c8031239f40c01cb.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst NotFoundPage = () => (\n  <Layout>\n    <SEO title=\"404: Not found\" />\n    <h1>NOT FOUND</h1>\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n  </Layout>\n)\n\nexport default NotFoundPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import Typography from 'typography'\n\nimport altonTheme from 'typography-theme-alton'\nimport deYoungTheme from 'typography-theme-de-young'\nimport doelgerTheme from 'typography-theme-doelger'\nimport elkGlenTheme from 'typography-theme-elk-glen'\nimport funstonTheme from 'typography-theme-funston'\nimport grandViewTheme from 'typography-theme-grand-view'\nimport irvingTheme from 'typography-theme-irving'\nimport judahTheme from 'typography-theme-judah'\nimport lawtonTheme from 'typography-theme-lawton'\nimport lincolnTheme from 'typography-theme-lincoln'  //\nimport kirkhamTheme from 'typography-theme-kirkham'\nimport moragaTheme from 'typography-theme-moraga'\nimport noriegaTheme from 'typography-theme-noriega'\nimport oceanBeachTheme from 'typography-theme-ocean-beach'  //\nimport parnassusTheme from 'typography-theme-parnassus'\nimport stAnnesTheme from 'typography-theme-st-annes'  // needs bigger font\nimport stowLakeTheme from 'typography-theme-stow-lake'\n\nimport sutroTheme from 'typography-theme-sutro'\nimport sternGroveTheme from 'typography-theme-stern-grove'\nimport twinPeaksTheme from 'typography-theme-twin-peaks'\nimport githubTheme from 'typography-theme-github'  //\n\nconst typography = new Typography(lincolnTheme)\n\nexport default typography\nexport const rhythm = typography.rhythm\nexport const scale = typography.scale","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\nimport typography from \"../utils/typography\"\n\nconst Header = ({ siteTitle }) => (\n  <header>\n    <style>{typography.toString()}</style>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            margin: `0 auto`,\n            maxWidth: 960,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n          }}\n        >\n          <main>{children}</main>\n          <footer>\n            © {new Date().getFullYear()}, Built with\n            {` `}\n            <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n          </footer>\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}